package motifsearcher;
import java.util.Vector;


/**
 * This class uses the MultiMotifMatcher to compute matches of multiple sequence regions of the same genomic sequence.
 * 
 * @author Ali T. Abdallah
 * @since jdk1.8
 * @version 08.05.2020
 */

public class MultiRegionsMultiMotifsMatcher {

	String id;
	String[] transcripts;
	int shift;
	int[] limits;
	String[] motifs;
	Vector<MultiMotifsMatcher> mmms;
	
	public MultiRegionsMultiMotifsMatcher(String id, String[] sequences, int shift, int[] limits, String... motifs) {
		this.id = id;
		this.transcripts = sequences;
		this.shift = shift;
		this.limits = limits;
		this.motifs = motifs;
		mmms = new Vector<MultiMotifsMatcher>();
	}
	
	public void run() {
		for(int i = 0; i < transcripts.length; i++) {
			MultiMotifsMatcher mmm = new MultiMotifsMatcher(id, transcripts[i], shift, limits, motifs);
			mmm.run();
			mmms.add(mmm);
		}
	}
	
	public String toString(String...seqnames) {
		String report = "";
		String tmp[] = id.substring(1).split("\\|");
		for(int i = 0; i < tmp.length-1; i++) {
			report += tmp[i]+"\t";
		}
		report += tmp[tmp.length-1];
		
		for(MultiMotifsMatcher mmm: mmms) {
			for(AtomicMotifMatcher mm: mmm.mms) {
				report += "\t"+mm.nomatches.size();
			}
		}
		report+="\t";
		int i = 0;
		for(MultiMotifsMatcher mmm: mmms) {
			report += seqnames[i++]+mmm.toString("BM","RM")+"\t";//+new MatchInfo(mmm.toString("BM","RM")).G_Infos();
		}
		return report;
	}
	
	public boolean nomatches() {
		for(MultiMotifsMatcher mmm: mmms) {
			for(AtomicMotifMatcher mm: mmm.mms) {
				if(mm.nomatches.size()>0) {
					return false;
				}
			}
		}
		return true;
	}
	
	public static void main(String[] args) {
		String transcripts[] = 
			{ "ATGGAGTCGGCCGACTTCTACGAGGCGGAGCCGCGGCCCCCGATGAGCAGCCACCTGCA"
				+ "GAGCCCCCCGCACGCGCCCAGCAGCGCCGCCTTCGGCTTTCCCCGGGGCGCGGGCCCCGCGCAGCCT"
				+ "CCCGCCCCACCTGCCGCCCCGGAGCCGCTGGGCGGCATCTGCGAGCACGAGACGTCCATCGACATCA"
				+ "GCGCCTACATCGACCCGGCCGCCTTCAACGACGAGTTCCTGGCCGACCTGTTCCAGCACAGCCGGCA"
				+ "GCAGGAGAAGGCCAAGGCGGCCGTGGGCCCCACGGGCGGCGGCGGCGGCGGCGACTTTGACTACCCG"
				+ "GGCGCGCCCGCGGGCCCCGGCGGCGCCGTCATGCCCGGGGGAGCGCACGGGCCCCCGCCCGGCTACG"
				+ "GCTGCGCGGCCGCCGGCTACCTGGACGGCAGGCTGGAGCCCCTGTACGAGCGCGTCGGGGCGCCGGC"
				+ "GCTGCGGCCGCTGGTGATCAAGCAGGAGCCCCGCGAGGAGGATGAAGCCAAGCAGCTGGCGCTGGCC"
				+ "GGCCTCTTCCCTTACCAGCCGCCGCCGCCGCCGCCGCCCTCGCACCCGCACCCGCACCCGCCGCCCG"
				+ "CGCACCTGGCCGCCCCGCACCTGCAGTTCCAGATCGCGCACTGCGGCCAGACCACCATGCACCTGCA"
				+ "GCCCGGTCACCCCACGCCGCCGCCCACGCCCGTGCCCAGCCCGCACCCCGCGCCCGCGCTCGGTGCC"
				+ "GCCGGCCTGCCGGGCCCTGGCAGCGCGCTCAAGGGGCTGGGCGCCGCGCACCCCGACCTCCGCGCGA"
				+ "GTGGCGGCAGCGGCGCGGGCAAGGCCAAGAAGTCGGTGGACAAGAACAGCAACGAGTACCGGGTGCG"
				+ "GCGCGAGCGCAACAACATCGCGGTGCGCAAGAGCCGCGACAAGGCCAAGCAGCGCAACGTGGAGACG"
				+ "CAGCAGAAGGTGCTGGAGCTGACCAGTGACAATGACCGCCTGCGCAAGCGGGTGGAACAGCTGAGCC"
				+ "GCGAACTGGACACGCTGCGGGGCATCTTCCGCCAGCTGCCAGAGAGCTCCTTGGTCAAGGCCATGGG"
				+ "CAACTGCGCGTGA", "GGCGCGCGGCTGTGGGACCGCCCTGGGCCAGCCTCCGGCGGGGACCCAGGGAGTGGTTTGGGGT"
				+ "CGCCGGATCTCGAGGCTTGCCCGAGCCGTGCGAGCCAGGACTAGGAGATTCCGGTGCCTCCTGAAAG"
				+ "CCTGGCCTGCTCCGCGTGTCCCCTCCCTTCCTCTGCGCCGGACTTGGTGCGTCTAAGATGAGGGGGC"
				+ "CAGGCGGTGGCTTCTCCCTGCGAGGAGGGGAGAATTCTTGGGGCTGAGCTGGGAGCCCGGCAACTCT"
				+ "AGTATTTAGGATAACCTTGTGCCTTGGAAATGCAAACTCACCGCTCCAATGCCTACTGAGTAGGGGG"
				+ "AGCAAATCGTGCCTTGTCATTTTATTTGGAGGTTTCCTGCCTCCTTCCCGAGGCTACAGCAGACCCC"
				+ "CATGAGAGAAGGAGGGGAGCAGGCCCGTGGCAGGAGGAGGGCTCAGGGAGCTGAGATCCCGACAAGC"
				+ "CCGCCAGCCCCAGCCGCTCCTCCACGCCTGTCCTTAGAAAGGGGTGGAAACATAGGGACTTGGGGCT"
				+ "TGGAACCTAAGGTTGTTCCCCTAGTTCTACATGAAGGTGGAGGGTCTCTAGTTCCACGCCTCTCCCA"
				+ "CCTCCCTCCGCACACACCCCACCCCAGCCTGCTATAGGCTGGGCTTCCCCTTGGGGCGGAACTCACT"
				+ "GCGATGGGGGTCACCAGGTGACCAGTGGGAGCCCCCACCCCGAGTCACACCAGAAAGCTAGGTCGTG"
				+ "GGTCAGCTCTGAGGATGTATACCCCTGGTGGGAGAGGGAGACCTAGAGATCTGGCTGTGGGGCGGGC"
				+ "ATGGGGGGTGAAGGGCCACTGGGACCCTCAGCCTTGTTTGTACTGTATGCCTTCAGCATTGCCTAGG"
				+ "AACACGAAGCACGATCAGTCCATCCCAGAGGGACCGGAGTTATGACAAGCTTTCCAAATATTTTGCT"
				+ "TTATCAGCCGATATCAACACTTGTATCTGGCCTCTGTGCCCCAGCAGTGCCTTGTGCAATGTGAATG"
				+ "TGCGCGTCTCTGCTAAACCACCATTTTATTTGGTTTTTGTTTTGTTTTGGTTTTGCTCGGATACTTG"
				+ "CCAAAATGAGACTCTCCGTCGGCAGCTGGGGGAAGGGTCTGAGACTCCCTTTCCTTTTGGTTTTGGG"
				+ "ATTACTTTTGATCCTGGGGGACCAATGAGGTGAGGGGGGTTCTCCTTTGCCCTCAGCTTTCCCCAGC"
				+ "CCCTCCGGCCTGGGCTGCCCACAAGGCTTGTCCCCCAGAGGCCCTGGCTCCTGGTCGGGAAGGGAGG"
				+ "TGGCCTCCCGCCAACGCATCACTGGGGCTGGGAGCAGGGAAGGACGGCTTGGTTCTCTTCTTTTGGG"
				+ "GAGAACGTAGAGTCTCACTCTAGATGTTTTATGTATTATATCTATAATATAAACATATCAAAGTCAA", 
				"TATAAAAGCTGGGCCGGCGCGGGCCGGGCCATTCGCGACCCGGAGGTGCGCGGGCGCGGGCGAG"
				+ "CAGGGTCTCCGGGTGGGCGGCGGCGACGCCCCGCGCAGGCTGGAGGCCGCCGAGGCTCGCCATGCCG"
				+ "GGAGAACTCTAACTCCCCC"};
		
		int[] limits = {19, 38};
	
		MultiRegionsMultiMotifsMatcher mms = new MultiRegionsMultiMotifsMatcher("GENEID|TID", transcripts, 0, limits, "[TC]CCC.*CCC[TC]", "[TC]CCC.*[TC]CCC.*[TC]CCC.*[TC]CCC");
		mms.run();
		
		System.out.println(mms.toString("CDS", "3UTR", "5UTR"));
	}
}
